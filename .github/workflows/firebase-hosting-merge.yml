# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on merge
on:
  push:
    branches:
      - main
    paths:
      - 'assets/**'
      - 'config/**'
      - 'content/**'
      - 'data/**'
      - 'i18n/**'
      - 'layouts/**'
      - 'static/**'
      - 'themes/**'
      - 'hugo.*'
      - 'config.*'
      - 'go.mod'
      - 'go.sum'
  workflow_run:
    workflows: ['Update hugo modules']
    types:
      - completed
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0
      - name: Cache Hugo resources
        uses: actions/cache@v4
        env:
          cache-name: cache-hugo-resources
        with:
          path: resources
          key: ${{ env.cache-name }}
      - uses: actions/setup-go@v5
        with:
          go-version: "^1.20.0"
      - run: go version
      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          # use the environment variable HUGO_VERSION as the hugo version, if not set, use `latest`.
          hugo-version: ${{ vars.HUGO_VERSION || 'latest' }}
          extended: true
      - name: Hugo build
        run: npm run build
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ATTAJAK }}
          channelId: live
          projectId: attajak
